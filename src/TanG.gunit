gunit TanG;




//Test Parser

//Test tanG production
tanG	:	
//This should fail
<<
node node1(a, b)
	cond
		a>b
			x=a+b
			node2 x
		end
		b>a
			y=b-a
			node3 b
		end
		a==b
			node4 a b    
     
			x=y=z=1

		end
	end
	node node2(greaterA)
		print "I am at node2"
		greaterA-4
	end
	node node3(greaterB)
		answer =greaterB-8
		node4 answer greaterB | node2 
		a|b|c|d|e|f
	end
	node node4(myA, myB)
		a = myA *5
		b = myB -5
		node5 a b
		node node5(g,h)
			sum = "I am at node 5"
			print sum
		end
	end
end
>>FAIL //expect failure
<<
node Node1(a, b)
	cond
		a>b
			x=a+b
			Node2 x
		end
		b>a
			y=b-a
			A b c| D e| F
			Node3 b
		end
		a==b
			Node4 a b    
     
			x=y=z=1

		end
	end
	node Node2(greaterA)
		print "I am at node2"
		greaterA-4
	end
	node Node3(greaterB)
		answer =greaterB-8
		Node4 answer greaterB | Node2 
		A|B|C|D|E|F
	end
	node Node4(myA, myB)
		a = myA *5
		b = myB -5
		Node5 a b
		node Node5(g,h)
			sum = "I am at node 5"
			Print sum
		end
	end
end
>> FAIL //expect failure

//Should Succeed
<<
import "File.td"
import "File2.td"

import "StandardLib.td"

node Node1(a, b)
	cond
		a>b
			x=a+b
			Node2 x
		end
		b>a
			y=b-a
			A b c| D| F
			Node3 b
		end
		a==b
			Node4 a b    
     
			x=y=z=1

		end
	end
	node Node2(greaterA)
		Print "I am at node2"
		greaterA-4
	end
	node Node3(greaterB)
		answer =greaterB-8
		Node4 answer greaterB | Node2 
		A|B|C|D|E|F
	end
	node Node4(myA, myB)
		a = myA *5
		b = myB -5
		Node5 a b
		node Node5(g,h)
			sum = "I am at node 5"
			Print sum
		end
	end
end>>OK


//Test imports
i	:
<<import "success.td"
import "mobetter.td">> OK

<<
  import "success.td"
>>OK


//Should fail
<<import fail.td>>FAIL

//Main Body Test
m	:
//should succeed
<<a=b>>OK
//Should fail, no NodeCode again!
<<2|A>>FAIL

//Should fail, no NodeCode again!
<<2 A>>FAIL

<<2 a b>>FAIL

<<3|4|5>>FAIL

<<a|b|b>>FAIL

<<"Car"|"A"|C>>FAIL

//Should succeed; proper pipeline
<<A a b|B|C>>OK

//should fail: no NodeCode in the pipeline
<<A|B + 2|C>>FAIL


//This should fail
<<node node1(a, b)
	cond
		a>b
			x=a+b
			node2 x
		end
		b>a
			y=b-a
			node3 b
		end
		a==b
			node4 a b    
     
			x=y=z=1

		end
	end
	node node2(greaterA)
		print "I am at node2"
		greaterA-4
	end
	node node3(greaterB)
		answer =greaterB-8
		node4 answer greaterB | node2 
		a|b|c|d|e|f
	end
	node node4(myA, myB)
		a = myA *5
		b = myB -5
		node5 a b
		node node5(g,h)
			sum = "I am at node 5"
			print sum
		end
	end
end
>>FAIL //expect failure
<<node Node1(a, b)
	cond
		a>b
			x=a+b
			Node2 x
		end
		b>a
			y=b-a
			A b c| D e| F
			Node3 b
		end
		a==b
			Node4 a b    
     
			x=y=z=1

		end
	end
	node Node2(greaterA)
		print "I am at node2"
		greaterA-4
	end
	node Node3(greaterB)
		answer =greaterB-8
		Node4 answer greaterB | Node2 
		A|B|C|D|E|F
	end
	node Node4(myA, myB)
		a = myA *5
		b = myB -5
		Node5 a b
		node Node5(g,h)
			sum = "I am at node 5"
			Print sum
		end
	end
end
>> FAIL //expect failure

//Should Succeed
<<node Node1(a, b)
	cond
		a>b
			x=a+b
			Node2 x
		end
		b>a
			y=b-a
			A b c| D| F
			Node3 b
		end
		a==b
			Node4 a b    
     
			x=y=z=1

		end
	end
	node Node2(greaterA)
		Print "I am at node2"
		greaterA-4
	end
	node Node3(greaterB)
		answer =greaterB-8
		Node4 answer greaterB | Node2 
		A|B|C|D|E|F
	end
	node Node4(myA, myB)
		a = myA *5
		b = myB -5
		Node5 a b
		node Node5(g,h)
			sum = "I am at node 5"
			Print sum
		end
	end
end>>OK

//should fail
<<1[2]>>FAIL



//Expression Unit Tests

expression:

//Should fail, no NodeCode in the PIPELINE!!
<<A|B|(C+2)>>FAIL

//Should fail, no NodeCode again!
<<A|2>>FAIL

//should succeed: note that it is actually two pipelines (pipe has higher precedence than +)
<<A|B+C|D>>OK










