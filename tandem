#!/usr/bin/env bash

# Written by Donald Pomeroy and Varun Ravishankar

EXPECTED_ARGS=1
E_BADARGS=22
E_NOFILE=2
E_WRONGFILETYPE=79
E_MISSINGCMD=1
E_BADVERSION=75

TANDEM_VERSION=0.1

use_jruby=0
compile_only=0
run_only=0
_ruby=""

display_version()
{
    echo "Tandem $TANDEM_VERSION"
}

display_usage()
{
    echo "Usage: `basename $0` [options] [filename]"
}

display_help()
{
    echo "Usage: `basename $0` [options] [filename]
    options:
      -b --ruby     Attempt to use system Ruby. If not valid, use JRuby.
      -c --compile  Only compile Tandem file.
      -h --help     List Tandem usage and options.
      -j --jruby    Use downloaded JRuby.
      -r --run      Assume compiled Ruby file exists and try running file.
      -v --version  Print Tandem version.
      -w --whole    Compile and run Tandem file."
}

walk_test()
{
    ant_out=$(ant walk -Dfile="$1")
    ant_out=$(echo $ant_out | sed 's/\(.*\)\(walk: \)//1' | sed 's/BUILD SUCCESSFUL//g' | sed 's/Total.*//g' | sed "s/\[java\]/\\`echo -e '\n\r'`\[Tandem\]/g")
    ant_out1=$ant_out
    ant_out1=$(echo $ant_out1 | sed 's/\s+//g' | sed 's/ *$//g' | sed 's/^ *//g')
    #echo $ant_out
    #echo ${#ant_out1}

    if [[ ${#ant_out1} == "0" ]]; then
    : #echo "GOOD"
    else
      echo "$ant_out"
      echo "ERROR" >&2
      exit
    fi
}

run_file()
{
  ruby_file=${@%.*}.rb

  #run a different version of ruby based on ant rubyexec

  $_ruby "$ruby_file"
  exit
}

check_ruby()
{
  if [[ "$use_jruby" > 0 ]]; then
    _ruby="java -jar lib/runtime/jruby-complete.jar --1.9"
    return
  fi

  if type -p ruby &>/dev/null; then
   : # echo "found ruby executable in PATH"
   _ruby=ruby
  elif [[ "/usr/bin/env ruby" ]];  then
     : #echo "found ruby executable in ENV"
     _ruby="/usr/bin/env ruby"
  else
    use_jruby=1
  fi

  if [[ "$_ruby" ]]; then
    version=$("$_ruby" -v 2>&1 |grep -e "1\.9\.[2-9]" )

      # if version if less than 1.9.2, use JRuby
      if [[ "$?" > "0" ]]; then
        use_jruby=1
      else
        : #echo "Passed Ruby Check"
      fi
  fi

  if [[ "$use_jruby" > 0 ]]; then
    _ruby="java -jar lib/runtime/jruby-complete.jar --1.9"
  fi
}


################################################################

# Check for options


#Check if a file is passed, if not fail

if [ $# -lt $EXPECTED_ARGS ]
then
  echo "COMPILATION FAILED - filename expected" >&2
  echo
  display_usage $0
  exit $E_BADARGS
fi

# check whether user had supplied -h or --help . If yes display usage
if [[ ( $1 == "--help") ||  $1 == "-h" ]]
then
  display_help
  exit 0
fi

# check whether user had supplied -v or --version . If yes display version
if [[ ( $1 == "--version") ||  $1 == "-v" ]]
then
  display_version
  exit 0
fi


# check whether user had supplied -c or --compile . If yes set to compile only mode
if [[ ( $1 == "--compile") ||  $1 == "-c" ]]
then
  compile_only=1
  shift
fi

# check whether user had supplied -r or --run . If yes set to run only mode
if [[ ( $1 == "--run") ||  $1 == "-r" ]]
then
  shift
  run_only=1
  check_ruby
  run_file $1
fi

# check whether user had supplied -w or --whole . If yes continue on
if [[ ( $1 == "--whole") ||  $1 == "-w" ]]
then
  shift
fi

# check whether user had supplied -b or --ruby . If yes continue on
if [[ ( $1 == "--ruby") ||  $1 == "-b" ]]
then
  shift
fi

# check whether user had supplied -b or --ruby . If yes continue on
if [[ ( $1 == "--ruby") ||  $1 == "-b" ]]
then
  shift
fi

# check whether user had supplied -j or --jruby . If yes set jruby mode
if [[ ( $1 == "--jruby") ||  $1 == "-j" ]]
then
  use_jruby=1
  shift
fi

###################################################################

# Check for invalid arguments


FILE=$1

#Check if the filename is valid .td

if [[ "$FILE" == *.td ]]
then
  : # echo "valid filename"
else
     echo "COMPILATION FAILED - invalid filename" >&2
     exit $E_WRONGFILETYPE
fi

if [ -f "$FILE" ]
then
     : #echo "the file exists"
else
    echo "COMPILATION FAILED - the file does not exist" >&2
    exit $E_NOFILE
fi

###################################################################

# Check for dependencies

#check java
#check ant 1.8
#check ruby 1.9.2

if type -p java &>/dev/null; then
    : #echo "found java executable in PATH"
    _java=java
elif [[ -n "$JAVA_HOME" ]] && [[ "$JAVA_HOME/bin/java" ]];  then
     : # echo "found java executable in JAVA_HOME"
    _java="$JAVA_HOME/bin/java"
else
    echo "COMPILATION FAILED - no java" >&2
    exit $E_MISSINGCMD
fi

if [[ "$_java" ]]; then
    version=$("$_java" -version 2>&1 | awk -F '"' '/version/ {print $2}')
     : #echo version "$version"
    if [[ "$version" > "1.5" ]]; then
      : #  echo "version is more than 1.5"
    else
        echo "COMPILATION FAILED - version is less than 1.5" >&2
	      exit $E_BADVERSION
    fi
fi


if type -p ant&>/dev/null; then
     : #echo found ant executable in PATH
    _ant=ant
elif [[ "/usr/bin/env ant" ]];  then
    : #echo "found ant executable in ENV_ANT"
    _ant="usr/bin/env ant"
else
    echo "COMPILATION FAILED - no ant" >&2
    exit $E_MISSINGCMD
fi

if [[ "$_ant" ]]; then
    version=$("$_ant" -version 2>&1 | grep -e "1\.8\.[0-9]")
    : #echo version "$version"
    if [[ "$?" == "0" ]]; then
        : #echo "version is more than 1.8"
    else
        echo "COMPILATION FAILED - version is less than 1.8" >&2
        exit $E_BADVERSION
    fi
fi

#Make JRuby use Ruby 1.9

JRUBY_OPTS=--1.9

check_ruby

DIR=$(pwd)

#$(echo $IN | tr ";" "\n")



###################################################################

# Begin compilation process

echo "compiling..." >&2

a=$($_ruby src/dependency.rb "$FILE" | sed 's/DELIM/\'$'\n/g' | sed 's/^ *//g')

OIFS="$IFS"
IFS=$'\n'
for x in $a
do
    x=$(echo $x | sed 's/^ *//g' | sed 's/ *$//g')
    walk_test "$x"
done
IFS="$OIFS"

walk_test "$FILE"

if [ $compile_only = 1 ]; then
  exit
fi

run_file $FILE
