#!/usr/bin/env bash

# Written by Donald Pomeroy and Varun Ravishankar

EXPECTED_ARGS=1
E_BADARGS=22
E_NOFILE=2
E_WRONGFILETYPE=79
E_MISSINGCMD=1
E_BADVERSION=75

error_exit()
{
  exit $1
}

walk_test() {
    ant_out=$(ant walk -Dfile="$1")
    ant_out=$(echo $ant_out | sed 's/\(.*\)\(walk: \)//1' | sed 's/BUILD SUCCESSFUL//g' | sed 's/Total.*//g' | sed "s/\[java\]/\\`echo -e '\n\r'`\[Tandem\]/g")
    ant_out1=$ant_out
    ant_out1=$(echo $ant_out1 | sed 's/\s+//g' | sed 's/ *$//g' | sed 's/^ *//g')
    #echo $ant_out
    #echo ${#ant_out1}

    if [[ ${#ant_out1} == "0" ]]; then
    : #echo "GOOD"
    else
      echo "$ant_out"
      echo "ERROR" >&2
      exit
    fi
}


#Check if a file is passed, if not fail

if [ $# -ne $EXPECTED_ARGS ]
then
  echo "Usage: `basename $0` filename" >&2
  echo "COMPILATION FAILED - filename expected" >&2
  error_exit $E_BADARGS
fi

FILE=$1

#Check if the filename is valid .td

if [[ "$FILE" == *.td ]]
then
  : # echo "valid filename"
else
     echo "COMPILATION FAILED - invalid filename" >&2
     exit $E_WRONGFILETYPE
fi

if [ -f "$FILE" ]
then
     : #echo "the file exists"
else
    echo "COMPILATION FAILED - the file does not exist" >&2
    exit $E_NOFILE
fi

#check java
#check ant 1.8
#check ruby 1.9.2

if type -p java &>/dev/null; then
    : #echo "found java executable in PATH"
    _java=java
elif [[ -n "$JAVA_HOME" ]] && [[ "$JAVA_HOME/bin/java" ]];  then
     : # echo "found java executable in JAVA_HOME"
    _java="$JAVA_HOME/bin/java"
else
    echo "COMPILATION FAILED - no java" >&2
    exit $E_MISSINGCMD
fi

if [[ "$_java" ]]; then
    version=$("$_java" -version 2>&1 | awk -F '"' '/version/ {print $2}')
     : #echo version "$version"
    if [[ "$version" > "1.5" ]]; then
      : #  echo "version is more than 1.5"
    else
        echo "COMPILATION FAILED - version is less than 1.5" >&2
	      exit $E_BADVERSION
    fi
fi



if type -p ant&>/dev/null; then
     : #echo found ant executable in PATH
    _ant=ant
elif [[ "/usr/bin/env ant" ]];  then
    : #echo "found ant executable in ENV_ANT"
    _ant="usr/bin/env ant"
else
    echo "COMPILATION FAILED - no ant" >&2
    exit $E_MISSINGCMD
fi

if [[ "$_ant" ]]; then
    version=$("$_ant" -version 2>&1 | grep -e "1\.8\.[0-9]")
    : #echo version "$version"
    if [[ "$?" == "0" ]]; then
        : #echo "version is more than 1.8"
    else
        echo "COMPILATION FAILED - version is less than 1.8" >&2
        exit $E_BADVERSION
    fi
fi

#Make JRuby use Ruby 1.9

JRUBY_OPTS=--1.9

use_jruby=0

if type -p ruby &>/dev/null; then
   : # echo "found ruby executable in PATH"
    _ruby=ruby
elif [[ "/usr/bin/env ruby" ]];  then
   : #echo "found ruby executable in ENV"
    _ruby="/usr/bin/env ruby"
else
    use_jruby=1
fi

if [[ "$_ruby" ]]; then
    version=$("$_ruby" -v 2>&1 |grep -e "1\.9\.[2-9]" )

    # if version if less than 1.9.2, use JRuby
    if [[ "$?" > "0" ]]; then
      use_jruby=1
    else
      : #echo "Passed Ruby Check"
    fi
fi


DIR=$(pwd)

#$(echo $IN | tr ";" "\n")

echo "compiling..." >&2

a=$(ruby src/dependency.rb "$FILE" | sed 's/DELIM/\'$'\n/g' | sed 's/^ *//g')

OIFS="$IFS"
IFS=$'\n'
for x in $a
do
    x=$(echo $x | sed 's/^ *//g' | sed 's/ *$//g')
    walk_test "$x"
done
IFS="$OIFS"

walk_test "$FILE"


ruby_file=${FILE%.*}

#run a different version of ruby based on ant rubyexec

if [[ "$_use_jruby" > 0 ]]; then
	java -jar lib/runtime/jruby-complete.jar --1.9 "$ruby_file"
else
	ruby "$ruby_file".rb
fi
